package com.example.project.domain.service;

import com.example.project.domain.model.Project;
import com.example.project.domain.repository.ProjectRepository;
import com.example.project.request.ProjectRequest;
import io.quarkus.test.InjectMock;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.when;

@QuarkusTest
public class ProjectServiceTest {

    @InjectMock
    ProjectRepository projectRepository;

    @Mock
    ProjectService projectService;

    private Project projectEntity;

    @BeforeEach
    void beforeEach() {
        projectEntity = new Project(1L, "Test Project", LocalDate.now(),
            LocalDate.now().plusDays(10), List.of());
    }


    @Test
    public void testCreateProject() {
        ProjectRequest projectRequest = new ProjectRequest("Test Project", LocalDate.now(),
            LocalDate.now().plusDays(10));

        doAnswer(invocation -> {
            return projectEntity;
        }).when(projectRepository).persist(Mockito.any(Project.class));

        Project project = projectService.createProject(projectRequest);

        assertNotNull(project);
        assertEquals(1L, project.id());
        assertEquals("Test Project", project.name());
    }


    @Test
    public void testGetAllProjects() {

        when(projectRepository.findAll()).thenReturn(Stream.of(projectEntity));

        var projects = projectService.findAllProjects().toList();

        assertNotNull(projects);
        assertEquals(1, projects.size());
        assertEquals("Test Project", projects.getFirst().name());
    }

    @Test
    public void testGetProjectById() {
        when(projectRepository.findByIdOptional(1L)).thenReturn(Optional.of(projectEntity));

        Optional<Project> project = projectService.findByIdOptional(1L);

        assertTrue(project.isPresent());
        assertEquals("Test Project", project.get().name());
    }
}
